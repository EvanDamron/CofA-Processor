# -*- coding: utf-8 -*-
"""NLP_BERT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17la3s3EdHXVm0NjXrH5GzW6CgrMEKxv-
"""

pip install transformers

from transformers import BertTokenizer, BertModel
import torch
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

# Load pre-trained BERT model and tokenizer
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')
model = BertModel.from_pretrained('bert-base-uncased')

# Function to get BERT embeddings for a text
def get_bert_embeddings(text):
    inputs = tokenizer(text, return_tensors='pt', truncation=True, padding=True)
    outputs = model(**inputs)
    # Use the embeddings from the last hidden state
    embeddings = outputs.last_hidden_state.mean(dim=1).detach().numpy()
    return embeddings

# Function to extract keywords using BERT embeddings
def extract_keywords_with_bert(text, top_n=10):
    # Tokenize the text into words
    words = text.split()

    # Get BERT embeddings for the entire text
    text_embedding = get_bert_embeddings(text)

    # Get BERT embeddings for each word
    word_embeddings = []
    for word in words:
        word_embedding = get_bert_embeddings(word)
        word_embeddings.append(word_embedding)

    # Calculate cosine similarity between each word and the entire text
    similarities = []
    for word_embedding in word_embeddings:
        similarity = cosine_similarity(text_embedding, word_embedding)
        similarities.append(similarity[0][0])

    # Rank words by their similarity to the text
    ranked_words = [(word, sim) for word, sim in zip(words, similarities)]
    ranked_words.sort(key=lambda x: x[1], reverse=True)

    # Extract top N keywords
    keywords = [word for word, sim in ranked_words[:top_n]]
    return keywords

# Read the text file
def read_text_file(file_path):
    with open(file_path, 'r') as file:
        text = file.read()
    return text

# Path to your text file
file_path = 'Raw Material.txt'

# Read the text from the file
text = read_text_file(file_path)

# Extract keywords using BERT
keywords = extract_keywords_with_bert(text, top_n=10)
print("Keywords extracted using BERT:", keywords)

# Store keywords in a database (optional)
import sqlite3

def store_keywords_in_db(keywords):
    conn = sqlite3.connect('keywords.db')
    c = conn.cursor()

    # Create table if it doesn't exist
    c.execute('''CREATE TABLE IF NOT EXISTS keywords
                 (id INTEGER PRIMARY KEY, keyword TEXT)''')

    # Insert keywords into the table
    for keyword in keywords:
        c.execute("INSERT INTO keywords (keyword) VALUES (?)", (keyword,))

    conn.commit()
    conn.close()

# Store the extracted keywords in the database
store_keywords_in_db(keywords)
print("Keywords stored in the database.")

